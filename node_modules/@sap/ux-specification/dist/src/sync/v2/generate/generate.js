"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateAnalyticalListPageInterfaceV2 = exports.generateOVPInterfaceV2 = exports.generateListReportInterfaceV2 = exports.generateObjectPageInterfaceV2 = void 0;
const utils_1 = require("../../common/utils");
const objectPage_1 = require("./objectPage");
const listReport_1 = require("./listReport");
const analyticalListReport_1 = require("./analyticalListReport");
const overviewPage_1 = require("./overviewPage");
const ux_specification_types_1 = require("@sap/ux-specification-types");
/**
 * Generates an app specific schema out of the generic schema.
 * Generic types are replaced by information from the app specific annotations.
 *
 * @param {object} genericSchema - generic JSON schema of an object page
 * @param {string} entitySet - the base entity type of the given page
 * @param {FileData[]} annotations - list of all annotation files (file content plus URI as identifier)
 * @param {object} manifest - manifest.json of the app
 * @param {FileData[]} [fragments] - Array with XML fragments.
 * @param {ExtensionLogger} logger - Logger class for logging messages
 *
 * @returns the app specific JSON schema
 */
function generateObjectPageInterfaceV2(genericSchema, entitySet, annotations, manifest, fragments, logger) {
    const serviceAVT = utils_1.parseAndMergeAndConvert(annotations, logger);
    const generateParameters = {
        templateType: ux_specification_types_1.TemplateType.ListReportObjectPageV2,
        fioriElementsVersion: ux_specification_types_1.FioriElementsVersion.v2,
        manifest,
        fragments,
        serviceAVT,
        logger
    };
    return objectPage_1.generateObjectPageSchemaV2(generateParameters, genericSchema, entitySet);
}
exports.generateObjectPageInterfaceV2 = generateObjectPageInterfaceV2;
/**
 * Generates the app specific schema of a list report out of the generic schema.
 * Generic types are replaced by information from the app specific annotations.
 *
 * @param genericSchema - generic JSON schema of a list report
 * @param entityType - the base entity type of the given page
 * @param annotations - list of all annotation files (file content plus URI as identifier)
 * @param manifest - manifest.json of the app
 * @param {FileData[]} fragments - list of fragment files and their content
 * @param {ExtensionLogger} logger - Logger class for logging messages
 *
 * @returns the app specific JSON schema
 */
function generateListReportInterfaceV2(genericSchema, entityType, annotations, manifest, fragments, logger) {
    const serviceAVT = utils_1.parseAndMergeAndConvert(annotations, logger);
    const generateParameters = {
        templateType: ux_specification_types_1.TemplateType.ListReportObjectPageV2,
        fioriElementsVersion: ux_specification_types_1.FioriElementsVersion.v2,
        manifest,
        fragments,
        serviceAVT,
        logger
    };
    return listReport_1.generateListReportSchemaV2(generateParameters, genericSchema, entityType);
}
exports.generateListReportInterfaceV2 = generateListReportInterfaceV2;
/**
 * Generates the app specific schema of an overview page
 * @param genericSchema - file content of the generic schema
 * @param manifest - manifest.json of the app
 *
 * @returns the generic schema, as equivalent to the app schema
 */
function generateOVPInterfaceV2(genericSchema, manifest) {
    return overviewPage_1.generateOverviewPageSchemaV2(genericSchema, manifest);
}
exports.generateOVPInterfaceV2 = generateOVPInterfaceV2;
/**
 * Generates the app specific schema of an analytical list page out of the generic schema.
 * Generic types are replaced by information from the app specific annotations.
 *
 * @param genericSchema - generic JSON schema of a list report
 * @param entityType - the base entity type of the given page
 * @param annotations - list of all annotation files (file content plus URI as identifier)
 * @param manifest - manifest.json of the app
 * @param {FileData[]} fragments - list of fragment files and their content
 * @param {ExtensionLogger} logger - Logger class for logging messages
 * @param {string} appId - application ID
 *
 * @returns the app specific JSON schema
 */
function generateAnalyticalListPageInterfaceV2(genericSchema, entityType, annotations, manifest, fragments, logger) {
    const serviceAVT = utils_1.parseAndMergeAndConvert(annotations, logger);
    const generateParameters = {
        templateType: ux_specification_types_1.TemplateType.AnalyticalListPageV2,
        fioriElementsVersion: ux_specification_types_1.FioriElementsVersion.v2,
        manifest,
        fragments,
        serviceAVT,
        logger
    };
    return analyticalListReport_1.generateAnalyticalListReportSchemaV2(generateParameters, genericSchema, entityType);
}
exports.generateAnalyticalListPageInterfaceV2 = generateAnalyticalListPageInterfaceV2;
//# sourceMappingURL=generate.js.map